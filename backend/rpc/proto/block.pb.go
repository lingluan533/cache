// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend/rpc/proto/block.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//创世块
type GenesisBlock struct {
	CreateTimestamp      string   `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId                string   `protobuf:"bytes,2,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	GenesisBlockHash     string   `protobuf:"bytes,4,opt,name=GenesisBlockHash,proto3" json:"GenesisBlockHash,omitempty"`
	DataCounts           int32    `protobuf:"varint,5,opt,name=DataCounts,proto3" json:"DataCounts,omitempty"`
	DataSize             int64    `protobuf:"varint,6,opt,name=DataSize,proto3" json:"DataSize,omitempty"`
	ChildBlockCount      int32    `protobuf:"varint,7,opt,name=ChildBlockCount,proto3" json:"ChildBlockCount,omitempty"`
	UpdateTimestamp      string   `protobuf:"bytes,8,opt,name=UpdateTimestamp,proto3" json:"UpdateTimestamp,omitempty"`
	CumulativeBlock      int64    `protobuf:"varint,9,opt,name=cumulativeBlock,proto3" json:"cumulativeBlock,omitempty"`
	Version              string   `protobuf:"bytes,10,opt,name=Version,proto3" json:"Version,omitempty"`
	BlockChainType       string   `protobuf:"bytes,11,opt,name=BlockChainType,proto3" json:"BlockChainType,omitempty"`
	LedgerType           string   `protobuf:"bytes,12,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	CreateChainTimestamp string   `protobuf:"bytes,13,opt,name=CreateChainTimestamp,proto3" json:"CreateChainTimestamp,omitempty"`
	CumulativeValue      int64    `protobuf:"varint,14,opt,name=CumulativeValue,proto3" json:"CumulativeValue,omitempty"`
	CumulativeNode       int64    `protobuf:"varint,15,opt,name=CumulativeNode,proto3" json:"CumulativeNode,omitempty"`
	CumulativeUser       int64    `protobuf:"varint,16,opt,name=CumulativeUser,proto3" json:"CumulativeUser,omitempty"`
	GroupMasterNodeCount int32    `protobuf:"varint,17,opt,name=GroupMasterNodeCount,proto3" json:"GroupMasterNodeCount,omitempty"`
	GroupSlaveNodeCount  int32    `protobuf:"varint,18,opt,name=GroupSlaveNodeCount,proto3" json:"GroupSlaveNodeCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenesisBlock) Reset()         { *m = GenesisBlock{} }
func (m *GenesisBlock) String() string { return proto.CompactTextString(m) }
func (*GenesisBlock) ProtoMessage()    {}
func (*GenesisBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{0}
}

func (m *GenesisBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenesisBlock.Unmarshal(m, b)
}
func (m *GenesisBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenesisBlock.Marshal(b, m, deterministic)
}
func (m *GenesisBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisBlock.Merge(m, src)
}
func (m *GenesisBlock) XXX_Size() int {
	return xxx_messageInfo_GenesisBlock.Size(m)
}
func (m *GenesisBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisBlock.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisBlock proto.InternalMessageInfo

func (m *GenesisBlock) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *GenesisBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *GenesisBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GenesisBlock) GetGenesisBlockHash() string {
	if m != nil {
		return m.GenesisBlockHash
	}
	return ""
}

func (m *GenesisBlock) GetDataCounts() int32 {
	if m != nil {
		return m.DataCounts
	}
	return 0
}

func (m *GenesisBlock) GetDataSize() int64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

func (m *GenesisBlock) GetChildBlockCount() int32 {
	if m != nil {
		return m.ChildBlockCount
	}
	return 0
}

func (m *GenesisBlock) GetUpdateTimestamp() string {
	if m != nil {
		return m.UpdateTimestamp
	}
	return ""
}

func (m *GenesisBlock) GetCumulativeBlock() int64 {
	if m != nil {
		return m.CumulativeBlock
	}
	return 0
}

func (m *GenesisBlock) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GenesisBlock) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *GenesisBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *GenesisBlock) GetCreateChainTimestamp() string {
	if m != nil {
		return m.CreateChainTimestamp
	}
	return ""
}

func (m *GenesisBlock) GetCumulativeValue() int64 {
	if m != nil {
		return m.CumulativeValue
	}
	return 0
}

func (m *GenesisBlock) GetCumulativeNode() int64 {
	if m != nil {
		return m.CumulativeNode
	}
	return 0
}

func (m *GenesisBlock) GetCumulativeUser() int64 {
	if m != nil {
		return m.CumulativeUser
	}
	return 0
}

func (m *GenesisBlock) GetGroupMasterNodeCount() int32 {
	if m != nil {
		return m.GroupMasterNodeCount
	}
	return 0
}

func (m *GenesisBlock) GetGroupSlaveNodeCount() int32 {
	if m != nil {
		return m.GroupSlaveNodeCount
	}
	return 0
}

//存证数据
type DataReceipt struct {
	CreateTimestamp      string   `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	EntityId             string   `protobuf:"bytes,2,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	KeyId                string   `protobuf:"bytes,3,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	ReceiptValue         float64  `protobuf:"fixed64,4,opt,name=ReceiptValue,proto3" json:"ReceiptValue,omitempty"`
	Version              string   `protobuf:"bytes,5,opt,name=Version,proto3" json:"Version,omitempty"`
	UserName             string   `protobuf:"bytes,6,opt,name=UserName,proto3" json:"UserName,omitempty"`
	OperationType        string   `protobuf:"bytes,7,opt,name=OperationType,proto3" json:"OperationType,omitempty"`
	DataType             string   `protobuf:"bytes,8,opt,name=DataType,proto3" json:"DataType,omitempty"`
	ServiceType          string   `protobuf:"bytes,9,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	FileName             string   `protobuf:"bytes,10,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileSize             float64  `protobuf:"fixed64,11,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	FileHash             string   `protobuf:"bytes,12,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
	Uri                  string   `protobuf:"bytes,13,opt,name=Uri,proto3" json:"Uri,omitempty"`
	ParentKeyId          string   `protobuf:"bytes,14,opt,name=ParentKeyId,proto3" json:"ParentKeyId,omitempty"`
	AttachmentFileUris   []string `protobuf:"bytes,15,rep,name=AttachmentFileUris,proto3" json:"AttachmentFileUris,omitempty"`
	AttachmentTotalHash  string   `protobuf:"bytes,16,opt,name=AttachmentTotalHash,proto3" json:"AttachmentTotalHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataReceipt) Reset()         { *m = DataReceipt{} }
func (m *DataReceipt) String() string { return proto.CompactTextString(m) }
func (*DataReceipt) ProtoMessage()    {}
func (*DataReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{1}
}

func (m *DataReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataReceipt.Unmarshal(m, b)
}
func (m *DataReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataReceipt.Marshal(b, m, deterministic)
}
func (m *DataReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataReceipt.Merge(m, src)
}
func (m *DataReceipt) XXX_Size() int {
	return xxx_messageInfo_DataReceipt.Size(m)
}
func (m *DataReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_DataReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_DataReceipt proto.InternalMessageInfo

func (m *DataReceipt) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *DataReceipt) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *DataReceipt) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *DataReceipt) GetReceiptValue() float64 {
	if m != nil {
		return m.ReceiptValue
	}
	return 0
}

func (m *DataReceipt) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DataReceipt) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *DataReceipt) GetOperationType() string {
	if m != nil {
		return m.OperationType
	}
	return ""
}

func (m *DataReceipt) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *DataReceipt) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *DataReceipt) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *DataReceipt) GetFileSize() float64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *DataReceipt) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *DataReceipt) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *DataReceipt) GetParentKeyId() string {
	if m != nil {
		return m.ParentKeyId
	}
	return ""
}

func (m *DataReceipt) GetAttachmentFileUris() []string {
	if m != nil {
		return m.AttachmentFileUris
	}
	return nil
}

func (m *DataReceipt) GetAttachmentTotalHash() string {
	if m != nil {
		return m.AttachmentTotalHash
	}
	return ""
}

//交易
type Transaction struct {
	CreateTimestamp      string   `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	EntityId             string   `protobuf:"bytes,2,opt,name=EntityId,proto3" json:"EntityId,omitempty"`
	TransactionId        string   `protobuf:"bytes,3,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
	Initiator            string   `protobuf:"bytes,4,opt,name=Initiator,proto3" json:"Initiator,omitempty"`
	Receipt              string   `protobuf:"bytes,5,opt,name=Receipt,proto3" json:"Receipt,omitempty"`
	TxAmount             float64  `protobuf:"fixed64,6,opt,name=TxAmount,proto3" json:"TxAmount,omitempty"`
	DataType             string   `protobuf:"bytes,7,opt,name=DataType,proto3" json:"DataType,omitempty"`
	ServiceType          string   `protobuf:"bytes,8,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	Remark               string   `protobuf:"bytes,9,opt,name=Remark,proto3" json:"Remark,omitempty"`
	BlockIdentify        string   `protobuf:"bytes,10,opt,name=BlockIdentify,proto3" json:"BlockIdentify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{2}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *Transaction) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *Transaction) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *Transaction) GetInitiator() string {
	if m != nil {
		return m.Initiator
	}
	return ""
}

func (m *Transaction) GetReceipt() string {
	if m != nil {
		return m.Receipt
	}
	return ""
}

func (m *Transaction) GetTxAmount() float64 {
	if m != nil {
		return m.TxAmount
	}
	return 0
}

func (m *Transaction) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *Transaction) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *Transaction) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Transaction) GetBlockIdentify() string {
	if m != nil {
		return m.BlockIdentify
	}
	return ""
}

type BlockHeader struct {
	CreateTimestamp string `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId           string `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	BlockHeight     int64  `protobuf:"varint,3,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	//具体数据结构类型
	DataType             string   `protobuf:"bytes,4,opt,name=DataType,proto3" json:"DataType,omitempty"`
	DataValue            string   `protobuf:"bytes,5,opt,name=DataValue,proto3" json:"DataValue,omitempty"`
	UpdateTimestamp      string   `protobuf:"bytes,6,opt,name=UpdateTimestamp,proto3" json:"UpdateTimestamp,omitempty"`
	DataHash             string   `protobuf:"bytes,7,opt,name=DataHash,proto3" json:"DataHash,omitempty"`
	BlockHash            string   `protobuf:"bytes,8,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	PreBlockHash         string   `protobuf:"bytes,9,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`
	Nonce                int32    `protobuf:"varint,10,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Target               int32    `protobuf:"varint,11,opt,name=Target,proto3" json:"Target,omitempty"`
	CurrentDataCount     int64    `protobuf:"varint,12,opt,name=CurrentDataCount,proto3" json:"CurrentDataCount,omitempty"`
	CurrentDataSize      int64    `protobuf:"varint,13,opt,name=CurrentDataSize,proto3" json:"CurrentDataSize,omitempty"`
	Version              string   `protobuf:"bytes,14,opt,name=Version,proto3" json:"Version,omitempty"`
	BlockType            string   `protobuf:"bytes,15,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	LedgerType           string   `protobuf:"bytes,16,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{3}
}

func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockHeader.Unmarshal(m, b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return xxx_messageInfo_BlockHeader.Size(m)
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *BlockHeader) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *BlockHeader) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *BlockHeader) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *BlockHeader) GetDataValue() string {
	if m != nil {
		return m.DataValue
	}
	return ""
}

func (m *BlockHeader) GetUpdateTimestamp() string {
	if m != nil {
		return m.UpdateTimestamp
	}
	return ""
}

func (m *BlockHeader) GetDataHash() string {
	if m != nil {
		return m.DataHash
	}
	return ""
}

func (m *BlockHeader) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *BlockHeader) GetPreBlockHash() string {
	if m != nil {
		return m.PreBlockHash
	}
	return ""
}

func (m *BlockHeader) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetTarget() int32 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *BlockHeader) GetCurrentDataCount() int64 {
	if m != nil {
		return m.CurrentDataCount
	}
	return 0
}

func (m *BlockHeader) GetCurrentDataSize() int64 {
	if m != nil {
		return m.CurrentDataSize
	}
	return 0
}

func (m *BlockHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *BlockHeader) GetBlockType() string {
	if m != nil {
		return m.BlockType
	}
	return ""
}

func (m *BlockHeader) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

type MinuteTxBlock struct {
	Header               *BlockHeader   `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Transactions         []*Transaction `protobuf:"bytes,2,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MinuteTxBlock) Reset()         { *m = MinuteTxBlock{} }
func (m *MinuteTxBlock) String() string { return proto.CompactTextString(m) }
func (*MinuteTxBlock) ProtoMessage()    {}
func (*MinuteTxBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{4}
}

func (m *MinuteTxBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinuteTxBlock.Unmarshal(m, b)
}
func (m *MinuteTxBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinuteTxBlock.Marshal(b, m, deterministic)
}
func (m *MinuteTxBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinuteTxBlock.Merge(m, src)
}
func (m *MinuteTxBlock) XXX_Size() int {
	return xxx_messageInfo_MinuteTxBlock.Size(m)
}
func (m *MinuteTxBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MinuteTxBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MinuteTxBlock proto.InternalMessageInfo

func (m *MinuteTxBlock) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MinuteTxBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type MinuteDataBlock struct {
	Header               *BlockHeader   `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	DataReceipts         []*DataReceipt `protobuf:"bytes,2,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MinuteDataBlock) Reset()         { *m = MinuteDataBlock{} }
func (m *MinuteDataBlock) String() string { return proto.CompactTextString(m) }
func (*MinuteDataBlock) ProtoMessage()    {}
func (*MinuteDataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{5}
}

func (m *MinuteDataBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MinuteDataBlock.Unmarshal(m, b)
}
func (m *MinuteDataBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MinuteDataBlock.Marshal(b, m, deterministic)
}
func (m *MinuteDataBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinuteDataBlock.Merge(m, src)
}
func (m *MinuteDataBlock) XXX_Size() int {
	return xxx_messageInfo_MinuteDataBlock.Size(m)
}
func (m *MinuteDataBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MinuteDataBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MinuteDataBlock proto.InternalMessageInfo

func (m *MinuteDataBlock) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MinuteDataBlock) GetDataReceipts() []*DataReceipt {
	if m != nil {
		return m.DataReceipts
	}
	return nil
}

type TenMinuteTxBlock struct {
	CreateTimestamp      string           `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId                string           `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PreBlockHash         string           `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`
	BlockHash            string           `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BlockHeight          int64            `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	BlockType            string           `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	LedgerType           string           `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	Blocks               []*MinuteTxBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TenMinuteTxBlock) Reset()         { *m = TenMinuteTxBlock{} }
func (m *TenMinuteTxBlock) String() string { return proto.CompactTextString(m) }
func (*TenMinuteTxBlock) ProtoMessage()    {}
func (*TenMinuteTxBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{6}
}

func (m *TenMinuteTxBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TenMinuteTxBlock.Unmarshal(m, b)
}
func (m *TenMinuteTxBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TenMinuteTxBlock.Marshal(b, m, deterministic)
}
func (m *TenMinuteTxBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenMinuteTxBlock.Merge(m, src)
}
func (m *TenMinuteTxBlock) XXX_Size() int {
	return xxx_messageInfo_TenMinuteTxBlock.Size(m)
}
func (m *TenMinuteTxBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TenMinuteTxBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TenMinuteTxBlock proto.InternalMessageInfo

func (m *TenMinuteTxBlock) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *TenMinuteTxBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *TenMinuteTxBlock) GetPreBlockHash() string {
	if m != nil {
		return m.PreBlockHash
	}
	return ""
}

func (m *TenMinuteTxBlock) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TenMinuteTxBlock) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TenMinuteTxBlock) GetBlockType() string {
	if m != nil {
		return m.BlockType
	}
	return ""
}

func (m *TenMinuteTxBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *TenMinuteTxBlock) GetBlocks() []*MinuteTxBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type DailyTxBlock struct {
	CreateTimestamp      string              `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId                string              `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PreBlockHash         string              `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`
	BlockHash            string              `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BlockHeight          int64               `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	BlockType            string              `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	LedgerType           string              `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	Blocks               []*TenMinuteTxBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DailyTxBlock) Reset()         { *m = DailyTxBlock{} }
func (m *DailyTxBlock) String() string { return proto.CompactTextString(m) }
func (*DailyTxBlock) ProtoMessage()    {}
func (*DailyTxBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{7}
}

func (m *DailyTxBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DailyTxBlock.Unmarshal(m, b)
}
func (m *DailyTxBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DailyTxBlock.Marshal(b, m, deterministic)
}
func (m *DailyTxBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyTxBlock.Merge(m, src)
}
func (m *DailyTxBlock) XXX_Size() int {
	return xxx_messageInfo_DailyTxBlock.Size(m)
}
func (m *DailyTxBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyTxBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DailyTxBlock proto.InternalMessageInfo

func (m *DailyTxBlock) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *DailyTxBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *DailyTxBlock) GetPreBlockHash() string {
	if m != nil {
		return m.PreBlockHash
	}
	return ""
}

func (m *DailyTxBlock) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *DailyTxBlock) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DailyTxBlock) GetBlockType() string {
	if m != nil {
		return m.BlockType
	}
	return ""
}

func (m *DailyTxBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *DailyTxBlock) GetBlocks() []*TenMinuteTxBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type TenMinuteDataBlock struct {
	CreateTimestamp      string             `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId                string             `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PreBlockHash         string             `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`
	BlockHash            string             `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BlockHeight          int64              `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	BlockType            string             `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	LedgerType           string             `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	Blocks               []*MinuteDataBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TenMinuteDataBlock) Reset()         { *m = TenMinuteDataBlock{} }
func (m *TenMinuteDataBlock) String() string { return proto.CompactTextString(m) }
func (*TenMinuteDataBlock) ProtoMessage()    {}
func (*TenMinuteDataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{8}
}

func (m *TenMinuteDataBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TenMinuteDataBlock.Unmarshal(m, b)
}
func (m *TenMinuteDataBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TenMinuteDataBlock.Marshal(b, m, deterministic)
}
func (m *TenMinuteDataBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenMinuteDataBlock.Merge(m, src)
}
func (m *TenMinuteDataBlock) XXX_Size() int {
	return xxx_messageInfo_TenMinuteDataBlock.Size(m)
}
func (m *TenMinuteDataBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TenMinuteDataBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TenMinuteDataBlock proto.InternalMessageInfo

func (m *TenMinuteDataBlock) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *TenMinuteDataBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *TenMinuteDataBlock) GetPreBlockHash() string {
	if m != nil {
		return m.PreBlockHash
	}
	return ""
}

func (m *TenMinuteDataBlock) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TenMinuteDataBlock) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TenMinuteDataBlock) GetBlockType() string {
	if m != nil {
		return m.BlockType
	}
	return ""
}

func (m *TenMinuteDataBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *TenMinuteDataBlock) GetBlocks() []*MinuteDataBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type DailyDataBlock struct {
	CreateTimestamp      string                `protobuf:"bytes,1,opt,name=CreateTimestamp,proto3" json:"CreateTimestamp,omitempty"`
	KeyId                string                `protobuf:"bytes,2,opt,name=keyId,proto3" json:"keyId,omitempty"`
	PreBlockHash         string                `protobuf:"bytes,3,opt,name=PreBlockHash,proto3" json:"PreBlockHash,omitempty"`
	BlockHash            string                `protobuf:"bytes,4,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
	BlockHeight          int64                 `protobuf:"varint,5,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	BlockType            string                `protobuf:"bytes,6,opt,name=BlockType,proto3" json:"BlockType,omitempty"`
	LedgerType           string                `protobuf:"bytes,7,opt,name=LedgerType,proto3" json:"LedgerType,omitempty"`
	Blocks               []*TenMinuteDataBlock `protobuf:"bytes,8,rep,name=Blocks,proto3" json:"Blocks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DailyDataBlock) Reset()         { *m = DailyDataBlock{} }
func (m *DailyDataBlock) String() string { return proto.CompactTextString(m) }
func (*DailyDataBlock) ProtoMessage()    {}
func (*DailyDataBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{9}
}

func (m *DailyDataBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DailyDataBlock.Unmarshal(m, b)
}
func (m *DailyDataBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DailyDataBlock.Marshal(b, m, deterministic)
}
func (m *DailyDataBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DailyDataBlock.Merge(m, src)
}
func (m *DailyDataBlock) XXX_Size() int {
	return xxx_messageInfo_DailyDataBlock.Size(m)
}
func (m *DailyDataBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_DailyDataBlock.DiscardUnknown(m)
}

var xxx_messageInfo_DailyDataBlock proto.InternalMessageInfo

func (m *DailyDataBlock) GetCreateTimestamp() string {
	if m != nil {
		return m.CreateTimestamp
	}
	return ""
}

func (m *DailyDataBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *DailyDataBlock) GetPreBlockHash() string {
	if m != nil {
		return m.PreBlockHash
	}
	return ""
}

func (m *DailyDataBlock) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *DailyDataBlock) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *DailyDataBlock) GetBlockType() string {
	if m != nil {
		return m.BlockType
	}
	return ""
}

func (m *DailyDataBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *DailyDataBlock) GetBlocks() []*TenMinuteDataBlock {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type Response struct {
	ErrCode              int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{10}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

//////////////////////查询数据接口///////////////////////
//主要四类数据的获取和返回
type RequestDataBatch struct {
	LedgerType           string   `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType       string   `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	DataType             string   `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Num                  int32    `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDataBatch) Reset()         { *m = RequestDataBatch{} }
func (m *RequestDataBatch) String() string { return proto.CompactTextString(m) }
func (*RequestDataBatch) ProtoMessage()    {}
func (*RequestDataBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{11}
}

func (m *RequestDataBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDataBatch.Unmarshal(m, b)
}
func (m *RequestDataBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDataBatch.Marshal(b, m, deterministic)
}
func (m *RequestDataBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDataBatch.Merge(m, src)
}
func (m *RequestDataBatch) XXX_Size() int {
	return xxx_messageInfo_RequestDataBatch.Size(m)
}
func (m *RequestDataBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDataBatch.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDataBatch proto.InternalMessageInfo

func (m *RequestDataBatch) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *RequestDataBatch) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *RequestDataBatch) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *RequestDataBatch) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type ResponseDataBatchBlock struct {
	ErrCode              int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	DataType             string   `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Length               int32    `protobuf:"varint,4,opt,name=length,proto3" json:"length,omitempty"`
	Data                 [][]byte `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseDataBatchBlock) Reset()         { *m = ResponseDataBatchBlock{} }
func (m *ResponseDataBatchBlock) String() string { return proto.CompactTextString(m) }
func (*ResponseDataBatchBlock) ProtoMessage()    {}
func (*ResponseDataBatchBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{12}
}

func (m *ResponseDataBatchBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseDataBatchBlock.Unmarshal(m, b)
}
func (m *ResponseDataBatchBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseDataBatchBlock.Marshal(b, m, deterministic)
}
func (m *ResponseDataBatchBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDataBatchBlock.Merge(m, src)
}
func (m *ResponseDataBatchBlock) XXX_Size() int {
	return xxx_messageInfo_ResponseDataBatchBlock.Size(m)
}
func (m *ResponseDataBatchBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDataBatchBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDataBatchBlock proto.InternalMessageInfo

func (m *ResponseDataBatchBlock) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResponseDataBatchBlock) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ResponseDataBatchBlock) GetDataType() string {
	if m != nil {
		return m.DataType
	}
	return ""
}

func (m *ResponseDataBatchBlock) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *ResponseDataBatchBlock) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RequestTx struct {
	LedgerType           string   `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType       string   `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	TransactionId        string   `protobuf:"bytes,3,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	Height               int64    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestTx) Reset()         { *m = RequestTx{} }
func (m *RequestTx) String() string { return proto.CompactTextString(m) }
func (*RequestTx) ProtoMessage()    {}
func (*RequestTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{13}
}

func (m *RequestTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestTx.Unmarshal(m, b)
}
func (m *RequestTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestTx.Marshal(b, m, deterministic)
}
func (m *RequestTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTx.Merge(m, src)
}
func (m *RequestTx) XXX_Size() int {
	return xxx_messageInfo_RequestTx.Size(m)
}
func (m *RequestTx) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTx.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTx proto.InternalMessageInfo

func (m *RequestTx) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *RequestTx) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *RequestTx) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *RequestTx) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ResponseTx struct {
	ErrCode              int32        `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string       `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Tx                   *Transaction `protobuf:"bytes,3,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResponseTx) Reset()         { *m = ResponseTx{} }
func (m *ResponseTx) String() string { return proto.CompactTextString(m) }
func (*ResponseTx) ProtoMessage()    {}
func (*ResponseTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{14}
}

func (m *ResponseTx) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseTx.Unmarshal(m, b)
}
func (m *ResponseTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseTx.Marshal(b, m, deterministic)
}
func (m *ResponseTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseTx.Merge(m, src)
}
func (m *ResponseTx) XXX_Size() int {
	return xxx_messageInfo_ResponseTx.Size(m)
}
func (m *ResponseTx) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseTx.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseTx proto.InternalMessageInfo

func (m *ResponseTx) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResponseTx) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ResponseTx) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type RequestDataReceipt struct {
	LedgerType           string   `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType       string   `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	KeyId                string   `protobuf:"bytes,3,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Height               int64    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDataReceipt) Reset()         { *m = RequestDataReceipt{} }
func (m *RequestDataReceipt) String() string { return proto.CompactTextString(m) }
func (*RequestDataReceipt) ProtoMessage()    {}
func (*RequestDataReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{15}
}

func (m *RequestDataReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDataReceipt.Unmarshal(m, b)
}
func (m *RequestDataReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDataReceipt.Marshal(b, m, deterministic)
}
func (m *RequestDataReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDataReceipt.Merge(m, src)
}
func (m *RequestDataReceipt) XXX_Size() int {
	return xxx_messageInfo_RequestDataReceipt.Size(m)
}
func (m *RequestDataReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDataReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDataReceipt proto.InternalMessageInfo

func (m *RequestDataReceipt) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *RequestDataReceipt) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *RequestDataReceipt) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

func (m *RequestDataReceipt) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type ResponseDataReceipt struct {
	ErrCode              int32          `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string         `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Receipt              []*DataReceipt `protobuf:"bytes,3,rep,name=receipt,proto3" json:"receipt,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResponseDataReceipt) Reset()         { *m = ResponseDataReceipt{} }
func (m *ResponseDataReceipt) String() string { return proto.CompactTextString(m) }
func (*ResponseDataReceipt) ProtoMessage()    {}
func (*ResponseDataReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{16}
}

func (m *ResponseDataReceipt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseDataReceipt.Unmarshal(m, b)
}
func (m *ResponseDataReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseDataReceipt.Marshal(b, m, deterministic)
}
func (m *ResponseDataReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDataReceipt.Merge(m, src)
}
func (m *ResponseDataReceipt) XXX_Size() int {
	return xxx_messageInfo_ResponseDataReceipt.Size(m)
}
func (m *ResponseDataReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDataReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDataReceipt proto.InternalMessageInfo

func (m *ResponseDataReceipt) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResponseDataReceipt) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ResponseDataReceipt) GetReceipt() []*DataReceipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

type RequestBlock struct {
	LedgerType           string   `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType       string   `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	KeyId                string   `protobuf:"bytes,4,opt,name=KeyId,proto3" json:"KeyId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestBlock) Reset()         { *m = RequestBlock{} }
func (m *RequestBlock) String() string { return proto.CompactTextString(m) }
func (*RequestBlock) ProtoMessage()    {}
func (*RequestBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{17}
}

func (m *RequestBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestBlock.Unmarshal(m, b)
}
func (m *RequestBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestBlock.Marshal(b, m, deterministic)
}
func (m *RequestBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestBlock.Merge(m, src)
}
func (m *RequestBlock) XXX_Size() int {
	return xxx_messageInfo_RequestBlock.Size(m)
}
func (m *RequestBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RequestBlock proto.InternalMessageInfo

func (m *RequestBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *RequestBlock) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *RequestBlock) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *RequestBlock) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type ResponseBlock struct {
	ErrCode              int32    `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	Block                []byte   `protobuf:"bytes,3,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseBlock) Reset()         { *m = ResponseBlock{} }
func (m *ResponseBlock) String() string { return proto.CompactTextString(m) }
func (*ResponseBlock) ProtoMessage()    {}
func (*ResponseBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{18}
}

func (m *ResponseBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseBlock.Unmarshal(m, b)
}
func (m *ResponseBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseBlock.Marshal(b, m, deterministic)
}
func (m *ResponseBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseBlock.Merge(m, src)
}
func (m *ResponseBlock) XXX_Size() int {
	return xxx_messageInfo_ResponseBlock.Size(m)
}
func (m *ResponseBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseBlock proto.InternalMessageInfo

func (m *ResponseBlock) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResponseBlock) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ResponseBlock) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

type RequestGenesisBlock struct {
	LedgerType           string   `protobuf:"bytes,1,opt,name=ledgerType,proto3" json:"ledgerType,omitempty"`
	BlockChainType       string   `protobuf:"bytes,2,opt,name=blockChainType,proto3" json:"blockChainType,omitempty"`
	Hash                 string   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestGenesisBlock) Reset()         { *m = RequestGenesisBlock{} }
func (m *RequestGenesisBlock) String() string { return proto.CompactTextString(m) }
func (*RequestGenesisBlock) ProtoMessage()    {}
func (*RequestGenesisBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{19}
}

func (m *RequestGenesisBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGenesisBlock.Unmarshal(m, b)
}
func (m *RequestGenesisBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGenesisBlock.Marshal(b, m, deterministic)
}
func (m *RequestGenesisBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGenesisBlock.Merge(m, src)
}
func (m *RequestGenesisBlock) XXX_Size() int {
	return xxx_messageInfo_RequestGenesisBlock.Size(m)
}
func (m *RequestGenesisBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGenesisBlock.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGenesisBlock proto.InternalMessageInfo

func (m *RequestGenesisBlock) GetLedgerType() string {
	if m != nil {
		return m.LedgerType
	}
	return ""
}

func (m *RequestGenesisBlock) GetBlockChainType() string {
	if m != nil {
		return m.BlockChainType
	}
	return ""
}

func (m *RequestGenesisBlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type ResponseGenesisBlock struct {
	ErrCode              int32         `protobuf:"varint,1,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg               string        `protobuf:"bytes,2,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	GenesisBlock         *GenesisBlock `protobuf:"bytes,4,opt,name=genesisBlock,proto3" json:"genesisBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResponseGenesisBlock) Reset()         { *m = ResponseGenesisBlock{} }
func (m *ResponseGenesisBlock) String() string { return proto.CompactTextString(m) }
func (*ResponseGenesisBlock) ProtoMessage()    {}
func (*ResponseGenesisBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{20}
}

func (m *ResponseGenesisBlock) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseGenesisBlock.Unmarshal(m, b)
}
func (m *ResponseGenesisBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseGenesisBlock.Marshal(b, m, deterministic)
}
func (m *ResponseGenesisBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseGenesisBlock.Merge(m, src)
}
func (m *ResponseGenesisBlock) XXX_Size() int {
	return xxx_messageInfo_ResponseGenesisBlock.Size(m)
}
func (m *ResponseGenesisBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseGenesisBlock.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseGenesisBlock proto.InternalMessageInfo

func (m *ResponseGenesisBlock) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ResponseGenesisBlock) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ResponseGenesisBlock) GetGenesisBlock() *GenesisBlock {
	if m != nil {
		return m.GenesisBlock
	}
	return nil
}

type UpperRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperRequest) Reset()         { *m = UpperRequest{} }
func (m *UpperRequest) String() string { return proto.CompactTextString(m) }
func (*UpperRequest) ProtoMessage()    {}
func (*UpperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{21}
}

func (m *UpperRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperRequest.Unmarshal(m, b)
}
func (m *UpperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperRequest.Marshal(b, m, deterministic)
}
func (m *UpperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperRequest.Merge(m, src)
}
func (m *UpperRequest) XXX_Size() int {
	return xxx_messageInfo_UpperRequest.Size(m)
}
func (m *UpperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpperRequest proto.InternalMessageInfo

func (m *UpperRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UpperReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpperReply) Reset()         { *m = UpperReply{} }
func (m *UpperReply) String() string { return proto.CompactTextString(m) }
func (*UpperReply) ProtoMessage()    {}
func (*UpperReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{22}
}

func (m *UpperReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpperReply.Unmarshal(m, b)
}
func (m *UpperReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpperReply.Marshal(b, m, deterministic)
}
func (m *UpperReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpperReply.Merge(m, src)
}
func (m *UpperReply) XXX_Size() int {
	return xxx_messageInfo_UpperReply.Size(m)
}
func (m *UpperReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UpperReply.DiscardUnknown(m)
}

var xxx_messageInfo_UpperReply proto.InternalMessageInfo

func (m *UpperReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//
//存证：video userBehaviour
//交易：nodeCredibility Sensor ServiceAccess
type VideoData struct {
	DataReceipts         []*DataReceipt `protobuf:"bytes,1,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VideoData) Reset()         { *m = VideoData{} }
func (m *VideoData) String() string { return proto.CompactTextString(m) }
func (*VideoData) ProtoMessage()    {}
func (*VideoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{23}
}

func (m *VideoData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoData.Unmarshal(m, b)
}
func (m *VideoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoData.Marshal(b, m, deterministic)
}
func (m *VideoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoData.Merge(m, src)
}
func (m *VideoData) XXX_Size() int {
	return xxx_messageInfo_VideoData.Size(m)
}
func (m *VideoData) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoData.DiscardUnknown(m)
}

var xxx_messageInfo_VideoData proto.InternalMessageInfo

func (m *VideoData) GetDataReceipts() []*DataReceipt {
	if m != nil {
		return m.DataReceipts
	}
	return nil
}

type UserBehaviourData struct {
	DataReceipts         []*DataReceipt `protobuf:"bytes,1,rep,name=DataReceipts,proto3" json:"DataReceipts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UserBehaviourData) Reset()         { *m = UserBehaviourData{} }
func (m *UserBehaviourData) String() string { return proto.CompactTextString(m) }
func (*UserBehaviourData) ProtoMessage()    {}
func (*UserBehaviourData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{24}
}

func (m *UserBehaviourData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserBehaviourData.Unmarshal(m, b)
}
func (m *UserBehaviourData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserBehaviourData.Marshal(b, m, deterministic)
}
func (m *UserBehaviourData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBehaviourData.Merge(m, src)
}
func (m *UserBehaviourData) XXX_Size() int {
	return xxx_messageInfo_UserBehaviourData.Size(m)
}
func (m *UserBehaviourData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBehaviourData.DiscardUnknown(m)
}

var xxx_messageInfo_UserBehaviourData proto.InternalMessageInfo

func (m *UserBehaviourData) GetDataReceipts() []*DataReceipt {
	if m != nil {
		return m.DataReceipts
	}
	return nil
}

type NodeCredibleData struct {
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeCredibleData) Reset()         { *m = NodeCredibleData{} }
func (m *NodeCredibleData) String() string { return proto.CompactTextString(m) }
func (*NodeCredibleData) ProtoMessage()    {}
func (*NodeCredibleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{25}
}

func (m *NodeCredibleData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeCredibleData.Unmarshal(m, b)
}
func (m *NodeCredibleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeCredibleData.Marshal(b, m, deterministic)
}
func (m *NodeCredibleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeCredibleData.Merge(m, src)
}
func (m *NodeCredibleData) XXX_Size() int {
	return xxx_messageInfo_NodeCredibleData.Size(m)
}
func (m *NodeCredibleData) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeCredibleData.DiscardUnknown(m)
}

var xxx_messageInfo_NodeCredibleData proto.InternalMessageInfo

func (m *NodeCredibleData) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type SensorData struct {
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SensorData) Reset()         { *m = SensorData{} }
func (m *SensorData) String() string { return proto.CompactTextString(m) }
func (*SensorData) ProtoMessage()    {}
func (*SensorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{26}
}

func (m *SensorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorData.Unmarshal(m, b)
}
func (m *SensorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorData.Marshal(b, m, deterministic)
}
func (m *SensorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorData.Merge(m, src)
}
func (m *SensorData) XXX_Size() int {
	return xxx_messageInfo_SensorData.Size(m)
}
func (m *SensorData) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorData.DiscardUnknown(m)
}

var xxx_messageInfo_SensorData proto.InternalMessageInfo

func (m *SensorData) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type ServiceAccessData struct {
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ServiceAccessData) Reset()         { *m = ServiceAccessData{} }
func (m *ServiceAccessData) String() string { return proto.CompactTextString(m) }
func (*ServiceAccessData) ProtoMessage()    {}
func (*ServiceAccessData) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e51296b3918a6e7, []int{27}
}

func (m *ServiceAccessData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccessData.Unmarshal(m, b)
}
func (m *ServiceAccessData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccessData.Marshal(b, m, deterministic)
}
func (m *ServiceAccessData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccessData.Merge(m, src)
}
func (m *ServiceAccessData) XXX_Size() int {
	return xxx_messageInfo_ServiceAccessData.Size(m)
}
func (m *ServiceAccessData) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccessData.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccessData proto.InternalMessageInfo

func (m *ServiceAccessData) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisBlock)(nil), "rpc.GenesisBlock")
	proto.RegisterType((*DataReceipt)(nil), "rpc.DataReceipt")
	proto.RegisterType((*Transaction)(nil), "rpc.Transaction")
	proto.RegisterType((*BlockHeader)(nil), "rpc.BlockHeader")
	proto.RegisterType((*MinuteTxBlock)(nil), "rpc.MinuteTxBlock")
	proto.RegisterType((*MinuteDataBlock)(nil), "rpc.MinuteDataBlock")
	proto.RegisterType((*TenMinuteTxBlock)(nil), "rpc.TenMinuteTxBlock")
	proto.RegisterType((*DailyTxBlock)(nil), "rpc.DailyTxBlock")
	proto.RegisterType((*TenMinuteDataBlock)(nil), "rpc.TenMinuteDataBlock")
	proto.RegisterType((*DailyDataBlock)(nil), "rpc.DailyDataBlock")
	proto.RegisterType((*Response)(nil), "rpc.Response")
	proto.RegisterType((*RequestDataBatch)(nil), "rpc.RequestDataBatch")
	proto.RegisterType((*ResponseDataBatchBlock)(nil), "rpc.ResponseDataBatchBlock")
	proto.RegisterType((*RequestTx)(nil), "rpc.RequestTx")
	proto.RegisterType((*ResponseTx)(nil), "rpc.ResponseTx")
	proto.RegisterType((*RequestDataReceipt)(nil), "rpc.RequestDataReceipt")
	proto.RegisterType((*ResponseDataReceipt)(nil), "rpc.ResponseDataReceipt")
	proto.RegisterType((*RequestBlock)(nil), "rpc.RequestBlock")
	proto.RegisterType((*ResponseBlock)(nil), "rpc.ResponseBlock")
	proto.RegisterType((*RequestGenesisBlock)(nil), "rpc.RequestGenesisBlock")
	proto.RegisterType((*ResponseGenesisBlock)(nil), "rpc.ResponseGenesisBlock")
	proto.RegisterType((*UpperRequest)(nil), "rpc.UpperRequest")
	proto.RegisterType((*UpperReply)(nil), "rpc.UpperReply")
	proto.RegisterType((*VideoData)(nil), "rpc.VideoData")
	proto.RegisterType((*UserBehaviourData)(nil), "rpc.UserBehaviourData")
	proto.RegisterType((*NodeCredibleData)(nil), "rpc.NodeCredibleData")
	proto.RegisterType((*SensorData)(nil), "rpc.SensorData")
	proto.RegisterType((*ServiceAccessData)(nil), "rpc.ServiceAccessData")
}

func init() { proto.RegisterFile("backend/rpc/proto/block.proto", fileDescriptor_3e51296b3918a6e7) }

var fileDescriptor_3e51296b3918a6e7 = []byte{
	// 1720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x59, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0xfa, 0xbf, 0x9f, 0xed, 0xd8, 0x99, 0xa4, 0xe9, 0x62, 0x0a, 0xb2, 0x56, 0x55, 0x15,
	0x45, 0x6d, 0x82, 0x52, 0x0a, 0x48, 0x85, 0x83, 0x13, 0x20, 0x0d, 0xd0, 0x52, 0x36, 0x4e, 0x91,
	0x38, 0xb1, 0xf1, 0x0e, 0xf1, 0x2a, 0xf6, 0xae, 0x33, 0xbb, 0xae, 0x1c, 0x2e, 0x5c, 0x38, 0x20,
	0x24, 0x0e, 0xe5, 0x0b, 0x80, 0x04, 0x9f, 0x82, 0x23, 0x37, 0x8e, 0x7c, 0x16, 0xc4, 0x01, 0x4e,
	0x68, 0xde, 0xec, 0x9f, 0x99, 0xdd, 0x4d, 0xd5, 0xa4, 0x39, 0x91, 0x9b, 0xdf, 0x9b, 0xf7, 0xde,
	0xbc, 0xf7, 0x9b, 0xdf, 0xcc, 0x7b, 0x9b, 0xc0, 0x6b, 0x87, 0xd6, 0xf0, 0x98, 0xba, 0xf6, 0x26,
	0x9b, 0x0e, 0x37, 0xa7, 0xcc, 0x0b, 0xbc, 0xcd, 0xc3, 0xb1, 0x37, 0x3c, 0xde, 0xc0, 0xdf, 0xa4,
	0xc8, 0xa6, 0x43, 0xe3, 0xf7, 0x32, 0x34, 0x77, 0xa9, 0x4b, 0x7d, 0xc7, 0xdf, 0xe6, 0x6b, 0x64,
	0x0d, 0xda, 0x3b, 0x8c, 0x5a, 0x01, 0x1d, 0x38, 0x13, 0xea, 0x07, 0xd6, 0x64, 0xaa, 0x6b, 0x3d,
	0x6d, 0xad, 0x6e, 0xa6, 0xd5, 0x64, 0x05, 0xca, 0x1f, 0xd3, 0xd3, 0x3d, 0x5b, 0x2f, 0xe0, 0xba,
	0x10, 0xc8, 0x2a, 0x54, 0x1e, 0x50, 0xe7, 0x68, 0x14, 0xe8, 0xc5, 0x9e, 0xb6, 0x56, 0x34, 0x43,
	0x89, 0xac, 0x43, 0x47, 0xde, 0xe7, 0x81, 0xe5, 0x8f, 0xf4, 0x12, 0x3a, 0x66, 0xf4, 0xe4, 0x75,
	0x80, 0xf7, 0xad, 0xc0, 0xda, 0xf1, 0x66, 0x6e, 0xe0, 0xeb, 0xe5, 0x9e, 0xb6, 0x56, 0x36, 0x25,
	0x0d, 0xe9, 0x42, 0x8d, 0x4b, 0xfb, 0xce, 0xd7, 0x54, 0xaf, 0xe0, 0x2e, 0xb1, 0x8c, 0xf9, 0x8f,
	0x9c, 0xb1, 0x8d, 0xd1, 0xd0, 0x5e, 0xaf, 0x62, 0x80, 0xb4, 0x9a, 0x5b, 0x1e, 0x4c, 0x6d, 0xa5,
	0xd2, 0x9a, 0xa8, 0x34, 0xa5, 0xe6, 0x96, 0xc3, 0xd9, 0x64, 0x36, 0xb6, 0x02, 0xe7, 0x29, 0xc5,
	0x08, 0x7a, 0x1d, 0xb7, 0x4d, 0xab, 0x89, 0x0e, 0xd5, 0x27, 0x94, 0xf9, 0x8e, 0xe7, 0xea, 0x80,
	0xb1, 0x22, 0x91, 0xdc, 0x82, 0x45, 0xb1, 0xf7, 0xc8, 0x72, 0xdc, 0xc1, 0xe9, 0x94, 0xea, 0x0d,
	0x34, 0x48, 0x69, 0x79, 0xed, 0x9f, 0x50, 0xfb, 0x88, 0x32, 0xb4, 0x69, 0xa2, 0x8d, 0xa4, 0x21,
	0x5b, 0xb0, 0x22, 0x0e, 0x42, 0xb8, 0xc4, 0xa9, 0xb7, 0xd0, 0x32, 0x77, 0x0d, 0x31, 0x89, 0x13,
	0x7d, 0x62, 0x8d, 0x67, 0x54, 0x5f, 0x14, 0xf9, 0xa7, 0xd4, 0x3c, 0xcb, 0x44, 0xf5, 0xc8, 0xb3,
	0xa9, 0xde, 0x46, 0xc3, 0x94, 0x56, 0xb5, 0x3b, 0xf0, 0x29, 0xd3, 0x3b, 0x69, 0x3b, 0xae, 0xe5,
	0xd9, 0xee, 0x32, 0x6f, 0x36, 0x7d, 0x68, 0xf9, 0x01, 0x65, 0xdc, 0x55, 0x1c, 0xc9, 0x12, 0x1e,
	0x49, 0xee, 0x1a, 0x79, 0x03, 0x96, 0x51, 0xbf, 0x3f, 0xb6, 0xc4, 0x6e, 0xc2, 0x85, 0xa0, 0x4b,
	0xde, 0x92, 0xf1, 0xac, 0x04, 0x0d, 0x4e, 0x00, 0x93, 0x0e, 0xa9, 0x33, 0x0d, 0xce, 0xc1, 0xe1,
	0x2e, 0xd4, 0x3e, 0x70, 0x03, 0x27, 0x48, 0x68, 0x1c, 0xcb, 0x09, 0xbf, 0x8b, 0x32, 0xbf, 0x0d,
	0x68, 0x86, 0xdb, 0x08, 0x20, 0x39, 0x87, 0x35, 0x53, 0xd1, 0xc9, 0x2c, 0x28, 0xab, 0x2c, 0xe8,
	0x42, 0x8d, 0xe3, 0xf2, 0xc8, 0x9a, 0x08, 0xe6, 0xd6, 0xcd, 0x58, 0x26, 0x37, 0xa1, 0xf5, 0xe9,
	0x94, 0x32, 0x2b, 0x70, 0x3c, 0x41, 0x90, 0x2a, 0x1a, 0xa8, 0xca, 0x88, 0xfb, 0x68, 0x20, 0xe8,
	0x1a, 0xcb, 0xa4, 0x07, 0x8d, 0x7d, 0xca, 0x9e, 0x3a, 0x43, 0x8a, 0xcb, 0x75, 0x5c, 0x96, 0x55,
	0xdc, 0xfb, 0x43, 0x67, 0x4c, 0x71, 0x7f, 0x41, 0xd0, 0x58, 0x8e, 0xd6, 0xf0, 0x56, 0x35, 0xb0,
	0xaa, 0x58, 0x8e, 0xd6, 0xf0, 0xd6, 0x36, 0x13, 0x3f, 0xbc, 0xad, 0x1d, 0x28, 0x1e, 0x30, 0x27,
	0x24, 0x20, 0xff, 0xc9, 0xf3, 0x78, 0x6c, 0x31, 0xea, 0x06, 0x02, 0xbf, 0x45, 0x91, 0x87, 0xa4,
	0x22, 0x1b, 0x40, 0xfa, 0x41, 0x60, 0x0d, 0x47, 0x13, 0xea, 0x06, 0x3c, 0xd2, 0x01, 0x73, 0x7c,
	0xbd, 0xdd, 0x2b, 0xae, 0xd5, 0xcd, 0x9c, 0x15, 0xce, 0x89, 0x44, 0x3b, 0xf0, 0x02, 0x6b, 0x8c,
	0xa9, 0x74, 0x30, 0x72, 0xde, 0x92, 0xf1, 0x47, 0x01, 0x1a, 0x03, 0x66, 0xb9, 0xbe, 0x35, 0xe4,
	0xd8, 0x5d, 0x12, 0x27, 0x6e, 0x42, 0x4b, 0x0a, 0x1a, 0x73, 0x43, 0x55, 0x92, 0x1b, 0x50, 0xdf,
	0x73, 0x9d, 0xc0, 0xb1, 0x02, 0x8f, 0x85, 0x8f, 0x5c, 0xa2, 0xe0, 0xec, 0x08, 0xd9, 0x12, 0xb1,
	0x23, 0xe2, 0x6d, 0x17, 0x6a, 0x83, 0x79, 0x7f, 0x82, 0x74, 0xaf, 0x88, 0x13, 0x88, 0x64, 0xe5,
	0xdc, 0xab, 0xcf, 0x3f, 0xf7, 0x5a, 0xf6, 0xdc, 0x57, 0xa1, 0x62, 0xd2, 0x89, 0xc5, 0x8e, 0x43,
	0x52, 0x84, 0x12, 0xaf, 0x07, 0xdf, 0x9f, 0x3d, 0x9b, 0xba, 0x81, 0xf3, 0xd5, 0x69, 0x48, 0x0a,
	0x55, 0x69, 0xfc, 0x50, 0x82, 0x86, 0x78, 0x9d, 0xa9, 0x65, 0x53, 0x76, 0xbe, 0x1e, 0x71, 0x2c,
	0xf7, 0x08, 0x14, 0x78, 0xbe, 0x61, 0x38, 0xa9, 0x51, 0xc8, 0x2a, 0xa5, 0xda, 0x52, 0xaa, 0xda,
	0x1b, 0x50, 0xe7, 0xbf, 0xc5, 0xf5, 0x13, 0x08, 0x26, 0x8a, 0xbc, 0x57, 0xbd, 0x92, 0xff, 0xaa,
	0x87, 0x7b, 0x20, 0x91, 0x24, 0x44, 0x91, 0xd3, 0x37, 0xa0, 0x9e, 0xb4, 0x29, 0x81, 0x67, 0xa2,
	0xe0, 0x6f, 0xc0, 0x63, 0x46, 0x13, 0x03, 0x81, 0xa9, 0xa2, 0xe3, 0x95, 0x3f, 0xf2, 0xdc, 0xa1,
	0xb8, 0x66, 0x65, 0x53, 0x08, 0xfc, 0x1c, 0x06, 0x16, 0x3b, 0xa2, 0x01, 0xde, 0xb0, 0xb2, 0x19,
	0x4a, 0xbc, 0x3b, 0xee, 0xcc, 0x18, 0xbf, 0x1f, 0x71, 0x9b, 0xc3, 0x7b, 0x56, 0x34, 0x33, 0x7a,
	0xf1, 0x9a, 0xc7, 0x3a, 0xbc, 0xae, 0xad, 0xe8, 0x35, 0x57, 0xd4, 0xf2, 0x3b, 0xb4, 0xa8, 0xbe,
	0x43, 0x51, 0x7d, 0x08, 0x70, 0x5b, 0xaa, 0x2f, 0xa7, 0x07, 0x75, 0xd2, 0x3d, 0xc8, 0xf0, 0xa0,
	0xf5, 0xd0, 0x71, 0x67, 0x01, 0x1d, 0xcc, 0xa3, 0xa1, 0xa1, 0x22, 0xa8, 0x81, 0x3c, 0x68, 0x6c,
	0x75, 0x36, 0xd8, 0x74, 0xb8, 0x21, 0x51, 0xc6, 0x0c, 0xd7, 0xc9, 0x9b, 0xd0, 0x94, 0xee, 0x8a,
	0xaf, 0x17, 0x7a, 0xc5, 0xd8, 0x5e, 0x5a, 0x30, 0x15, 0x2b, 0xe3, 0x04, 0xda, 0x62, 0x43, 0x5e,
	0xda, 0x05, 0xb6, 0x94, 0x9a, 0x83, 0xba, 0xa5, 0xb4, 0x60, 0x2a, 0x56, 0xc6, 0xcf, 0x05, 0xe8,
	0x0c, 0xa8, 0x9b, 0xae, 0xf3, 0xe5, 0x88, 0x9f, 0x26, 0x4e, 0x31, 0x87, 0x38, 0x0a, 0xf5, 0x4a,
	0x69, 0xea, 0xa5, 0xae, 0x4e, 0x39, 0x7b, 0x75, 0x94, 0xa3, 0xad, 0x3c, 0xff, 0x68, 0xab, 0x99,
	0xf1, 0x62, 0x1d, 0x2a, 0x68, 0xec, 0xeb, 0x35, 0x84, 0x89, 0x20, 0x4c, 0x0a, 0x0a, 0x66, 0x68,
	0x61, 0xfc, 0x54, 0xe0, 0xc8, 0x3a, 0xe3, 0xd3, 0xab, 0x03, 0xcf, 0x9d, 0x14, 0x3c, 0xd7, 0x04,
	0x71, 0x53, 0x3c, 0x89, 0x11, 0xfa, 0xb5, 0x00, 0x24, 0x5e, 0x94, 0xb9, 0xfb, 0x7f, 0xc7, 0xe9,
	0x76, 0x0a, 0xa7, 0x15, 0x89, 0x46, 0x31, 0x0e, 0x31, 0x4c, 0xbf, 0x14, 0x60, 0x11, 0x89, 0x74,
	0x95, 0x20, 0xda, 0x4c, 0x41, 0x74, 0x5d, 0xa5, 0x52, 0x16, 0xa5, 0x77, 0xa1, 0x66, 0x52, 0x7f,
	0xea, 0xb9, 0x3e, 0xbe, 0xec, 0x94, 0xb1, 0x1d, 0x3e, 0xa0, 0x6b, 0xd8, 0x48, 0x22, 0x91, 0x77,
	0x18, 0xca, 0xd8, 0x43, 0xff, 0x28, 0xc4, 0x23, 0x94, 0x8c, 0xef, 0x34, 0xe8, 0x98, 0xf4, 0x64,
	0x46, 0x7d, 0xec, 0x0f, 0xdb, 0x56, 0x30, 0xc4, 0x0f, 0xad, 0x71, 0x92, 0xa3, 0x00, 0x58, 0xd2,
	0xf0, 0x31, 0xff, 0x50, 0xfd, 0x68, 0x11, 0x41, 0x53, 0x5a, 0xde, 0x4a, 0xed, 0xa8, 0x5d, 0x0b,
	0xa4, 0x63, 0x99, 0x8f, 0x87, 0xee, 0x6c, 0x82, 0xf8, 0x96, 0x4d, 0xfe, 0xd3, 0xf8, 0x51, 0x83,
	0xd5, 0xa8, 0x92, 0x38, 0x97, 0xf8, 0xfb, 0xe9, 0x7c, 0x75, 0x3d, 0x77, 0xeb, 0x55, 0xa8, 0x8c,
	0xa9, 0x7b, 0x14, 0x8c, 0xc2, 0xdd, 0x43, 0x89, 0x10, 0x28, 0x71, 0x1b, 0xbd, 0xdc, 0x2b, 0xae,
	0x35, 0x4d, 0xfc, 0x6d, 0x3c, 0xd3, 0xa0, 0x1e, 0xe2, 0x33, 0x98, 0x5f, 0x1a, 0x30, 0x37, 0xa1,
	0x15, 0xe4, 0xcd, 0x8b, 0x8a, 0x92, 0xe7, 0x39, 0x12, 0x2c, 0x2b, 0x89, 0x6f, 0x66, 0x21, 0x19,
	0x5f, 0x02, 0x44, 0x38, 0x0d, 0xe6, 0x17, 0xc0, 0xa6, 0x07, 0x85, 0x60, 0x8e, 0x5b, 0xe6, 0xb5,
	0xd8, 0x42, 0x30, 0x37, 0xbe, 0xd7, 0x80, 0x48, 0xac, 0x88, 0x06, 0xd1, 0xcb, 0x2a, 0x3f, 0xbe,
	0x9b, 0x45, 0xf9, 0x6e, 0x9e, 0x55, 0xae, 0x0f, 0xcb, 0x32, 0x2d, 0xa2, 0x64, 0xce, 0x5f, 0xf7,
	0x3a, 0x54, 0x59, 0x38, 0x61, 0x17, 0xcf, 0x68, 0xf6, 0x91, 0x81, 0xf1, 0xad, 0xc6, 0x3f, 0xe8,
	0x10, 0x01, 0x41, 0xc1, 0xcb, 0xaa, 0x3d, 0xa9, 0xb2, 0x28, 0x57, 0x99, 0x7c, 0x56, 0x96, 0xa4,
	0xcf, 0x4a, 0xe3, 0x73, 0x68, 0x45, 0xb5, 0x5f, 0xf4, 0x26, 0xac, 0x40, 0x19, 0x53, 0xc0, 0xfd,
	0x9a, 0xa6, 0x10, 0x8c, 0x13, 0x0e, 0x2a, 0x96, 0xa7, 0xfc, 0x99, 0xe7, 0xb2, 0xaa, 0x24, 0x50,
	0x1a, 0x25, 0xef, 0x2b, 0xfe, 0x36, 0xbe, 0x81, 0x95, 0xa8, 0x16, 0x65, 0xcf, 0xf3, 0x97, 0x74,
	0x0f, 0x9a, 0x47, 0x52, 0x04, 0x84, 0xac, 0xb1, 0xb5, 0x84, 0xa7, 0x29, 0x87, 0x36, 0x15, 0x33,
	0xc3, 0x80, 0xe6, 0xc1, 0x74, 0x4a, 0x59, 0x58, 0x38, 0x4f, 0xd2, 0xe5, 0x5f, 0xbc, 0xa2, 0x4c,
	0xfc, 0x6d, 0xdc, 0x02, 0x08, 0x6d, 0xa6, 0xe3, 0x53, 0x9e, 0xda, 0x84, 0xfa, 0xbe, 0x75, 0x14,
	0x19, 0x45, 0xa2, 0xd1, 0x87, 0xfa, 0x13, 0xc7, 0xa6, 0x1e, 0x27, 0x4f, 0x66, 0x94, 0xd4, 0x5e,
	0x68, 0x94, 0xdc, 0x83, 0x25, 0xfe, 0x91, 0xbf, 0x4d, 0x47, 0xd6, 0x53, 0xc7, 0x9b, 0xb1, 0x97,
	0x08, 0xf5, 0x00, 0x3a, 0xf8, 0x67, 0x0f, 0x46, 0x6d, 0xe7, 0x70, 0x4c, 0xa3, 0x48, 0xca, 0x48,
	0xad, 0xbd, 0xd0, 0x48, 0xbd, 0x0d, 0xb0, 0x4f, 0x5d, 0xdf, 0x63, 0x2f, 0x11, 0x63, 0x0f, 0x96,
	0xc2, 0x8f, 0xcc, 0xfe, 0x70, 0x48, 0x7d, 0xff, 0xe2, 0xa1, 0xb6, 0xfe, 0xd6, 0x60, 0x59, 0x04,
	0x11, 0x2d, 0x32, 0x8c, 0x4b, 0xee, 0x41, 0xbb, 0x6f, 0xdb, 0x0a, 0x8d, 0xb2, 0xc7, 0xdf, 0x6d,
	0xa1, 0x2a, 0x22, 0x9d, 0xb1, 0x40, 0xee, 0xc1, 0x62, 0xdf, 0xb6, 0x45, 0x27, 0x15, 0x5e, 0x39,
	0x83, 0x6c, 0xd6, 0xed, 0x3e, 0x2c, 0xf5, 0x6d, 0x3b, 0xee, 0xc1, 0xc2, 0x33, 0x7f, 0xc6, 0xcb,
	0x3a, 0xdf, 0x85, 0x56, 0xdf, 0xb6, 0x71, 0x8e, 0x91, 0x13, 0x95, 0x27, 0xe4, 0x8c, 0xd3, 0xd6,
	0x5f, 0x1a, 0x2c, 0xf1, 0x13, 0xbd, 0x5a, 0x55, 0xf3, 0xd3, 0x16, 0xec, 0xbb, 0x5a, 0x75, 0xff,
	0xa3, 0x89, 0xa7, 0xe0, 0x52, 0xaa, 0x7e, 0x3b, 0x53, 0x75, 0xee, 0x94, 0x9d, 0x75, 0x7c, 0x2f,
	0xaf, 0xee, 0xb3, 0xc6, 0xcf, 0x3c, 0xb4, 0x53, 0x95, 0x2f, 0x27, 0x95, 0x9f, 0xed, 0xb6, 0xf5,
	0xaf, 0x06, 0x04, 0x5f, 0xd2, 0xab, 0x58, 0xfc, 0x9f, 0x05, 0x68, 0x7e, 0x36, 0xa3, 0xec, 0x34,
	0x2a, 0x7b, 0x17, 0xda, 0x27, 0x5c, 0x46, 0x7b, 0x31, 0x8c, 0x5f, 0x0b, 0x9d, 0xd4, 0x19, 0xbd,
	0xfb, 0xaa, 0x12, 0x4b, 0x9d, 0x97, 0x31, 0x21, 0x48, 0x02, 0x85, 0xd0, 0xc9, 0xf3, 0x4c, 0x97,
	0x28, 0xfe, 0x91, 0xdb, 0x47, 0xb0, 0x84, 0x6e, 0x6a, 0x83, 0x96, 0xbd, 0x15, 0xfc, 0x5f, 0x51,
	0x82, 0xc8, 0x4b, 0xc6, 0x02, 0xb9, 0x0d, 0x55, 0x8c, 0x35, 0x98, 0x93, 0x45, 0x39, 0xc2, 0x60,
	0xde, 0x6d, 0x2b, 0x7e, 0x83, 0xb9, 0xb1, 0x40, 0x76, 0xa1, 0x83, 0xd6, 0xf2, 0x88, 0x77, 0x3d,
	0x5d, 0x7a, 0xb8, 0xd0, 0xd5, 0x33, 0xc5, 0x87, 0x2b, 0xc6, 0xc2, 0xd6, 0x6f, 0x05, 0xa8, 0x0e,
	0x3c, 0x6c, 0xe2, 0xe4, 0x0e, 0x94, 0xc5, 0x0f, 0x01, 0x80, 0xdc, 0xfd, 0xc3, 0x1c, 0x92, 0x66,
	0x6f, 0x2c, 0x90, 0xb7, 0xa0, 0x29, 0xb7, 0xd1, 0x10, 0xfa, 0x74, 0x67, 0xcd, 0x9e, 0xfe, 0x1a,
	0x94, 0x91, 0xc2, 0x61, 0x9d, 0xf1, 0x60, 0x90, 0xb5, 0x5c, 0x87, 0x8a, 0x78, 0xe0, 0x88, 0xd8,
	0x3e, 0xe9, 0xb5, 0x59, 0xdb, 0x77, 0xa0, 0xa5, 0xcc, 0x07, 0x64, 0x55, 0x64, 0x9c, 0x9e, 0x19,
	0x72, 0x3d, 0x95, 0x06, 0x1c, 0x7a, 0x66, 0x9a, 0x72, 0xc6, 0x73, 0xbb, 0xf6, 0x45, 0x65, 0x63,
	0xf3, 0x3e, 0x9b, 0x0e, 0x0f, 0x2b, 0xf8, 0xdf, 0xc0, 0xbb, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x51, 0x95, 0xb1, 0x56, 0x2e, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccessLedgerServiceClient is the client API for AccessLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type accessLedgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccessLedgerServiceClient(cc *grpc.ClientConn) AccessLedgerServiceClient {
	return &accessLedgerServiceClient{cc}
}

func (c *accessLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.AccessLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessLedgerServiceServer is the server API for AccessLedgerService service.
type AccessLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedAccessLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAccessLedgerServiceServer struct {
}

func (*UnimplementedAccessLedgerServiceServer) AddGenesisBlock(ctx context.Context, req *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddMinuteBlock(ctx context.Context, req *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddTenMinuteBlock(ctx context.Context, req *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedAccessLedgerServiceServer) AddDailyBlock(ctx context.Context, req *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterAccessLedgerServiceServer(s *grpc.Server, srv AccessLedgerServiceServer) {
	s.RegisterService(&_AccessLedgerService_serviceDesc, srv)
}

func _AccessLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AccessLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AccessLedgerService",
	HandlerType: (*AccessLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _AccessLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _AccessLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _AccessLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _AccessLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// NodeLedgerServiceClient is the client API for NodeLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NodeLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type nodeLedgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewNodeLedgerServiceClient(cc *grpc.ClientConn) NodeLedgerServiceClient {
	return &nodeLedgerServiceClient{cc}
}

func (c *nodeLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.NodeLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeLedgerServiceServer is the server API for NodeLedgerService service.
type NodeLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedNodeLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNodeLedgerServiceServer struct {
}

func (*UnimplementedNodeLedgerServiceServer) AddGenesisBlock(ctx context.Context, req *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddMinuteBlock(ctx context.Context, req *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddTenMinuteBlock(ctx context.Context, req *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedNodeLedgerServiceServer) AddDailyBlock(ctx context.Context, req *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterNodeLedgerServiceServer(s *grpc.Server, srv NodeLedgerServiceServer) {
	s.RegisterService(&_NodeLedgerService_serviceDesc, srv)
}

func _NodeLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.NodeLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _NodeLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.NodeLedgerService",
	HandlerType: (*NodeLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _NodeLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _NodeLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _NodeLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _NodeLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// SensorLedgerServiceClient is the client API for SensorLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error)
}

type sensorLedgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorLedgerServiceClient(cc *grpc.ClientConn) SensorLedgerServiceClient {
	return &sensorLedgerServiceClient{cc}
}

func (c *sensorLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyTxBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.SensorLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorLedgerServiceServer is the server API for SensorLedgerService service.
type SensorLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteTxBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteTxBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyTxBlock) (*Response, error)
}

// UnimplementedSensorLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorLedgerServiceServer struct {
}

func (*UnimplementedSensorLedgerServiceServer) AddGenesisBlock(ctx context.Context, req *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddMinuteBlock(ctx context.Context, req *MinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddTenMinuteBlock(ctx context.Context, req *TenMinuteTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedSensorLedgerServiceServer) AddDailyBlock(ctx context.Context, req *DailyTxBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterSensorLedgerServiceServer(s *grpc.Server, srv SensorLedgerServiceServer) {
	s.RegisterService(&_SensorLedgerService_serviceDesc, srv)
}

func _SensorLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyTxBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SensorLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyTxBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SensorLedgerService",
	HandlerType: (*SensorLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _SensorLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _SensorLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _SensorLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _SensorLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// UserLedgerServiceClient is the client API for UserLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error)
}

type userLedgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserLedgerServiceClient(cc *grpc.ClientConn) UserLedgerServiceClient {
	return &userLedgerServiceClient{cc}
}

func (c *userLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.UserLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLedgerServiceServer is the server API for UserLedgerService service.
type UserLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error)
}

// UnimplementedUserLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserLedgerServiceServer struct {
}

func (*UnimplementedUserLedgerServiceServer) AddGenesisBlock(ctx context.Context, req *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddMinuteBlock(ctx context.Context, req *MinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddTenMinuteBlock(ctx context.Context, req *TenMinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedUserLedgerServiceServer) AddDailyBlock(ctx context.Context, req *DailyDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterUserLedgerServiceServer(s *grpc.Server, srv UserLedgerServiceServer) {
	s.RegisterService(&_UserLedgerService_serviceDesc, srv)
}

func _UserLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.UserLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UserLedgerService",
	HandlerType: (*UserLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _UserLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _UserLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _UserLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _UserLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// VideoLedgerServiceClient is the client API for VideoLedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VideoLedgerServiceClient interface {
	AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error)
	AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error)
	AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error)
}

type videoLedgerServiceClient struct {
	cc *grpc.ClientConn
}

func NewVideoLedgerServiceClient(cc *grpc.ClientConn) VideoLedgerServiceClient {
	return &videoLedgerServiceClient{cc}
}

func (c *videoLedgerServiceClient) AddGenesisBlock(ctx context.Context, in *GenesisBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddMinuteBlock(ctx context.Context, in *MinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddTenMinuteBlock(ctx context.Context, in *TenMinuteDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddTenMinuteBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoLedgerServiceClient) AddDailyBlock(ctx context.Context, in *DailyDataBlock, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.VideoLedgerService/AddDailyBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoLedgerServiceServer is the server API for VideoLedgerService service.
type VideoLedgerServiceServer interface {
	AddGenesisBlock(context.Context, *GenesisBlock) (*Response, error)
	AddMinuteBlock(context.Context, *MinuteDataBlock) (*Response, error)
	AddTenMinuteBlock(context.Context, *TenMinuteDataBlock) (*Response, error)
	AddDailyBlock(context.Context, *DailyDataBlock) (*Response, error)
}

// UnimplementedVideoLedgerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVideoLedgerServiceServer struct {
}

func (*UnimplementedVideoLedgerServiceServer) AddGenesisBlock(ctx context.Context, req *GenesisBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGenesisBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddMinuteBlock(ctx context.Context, req *MinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMinuteBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddTenMinuteBlock(ctx context.Context, req *TenMinuteDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTenMinuteBlock not implemented")
}
func (*UnimplementedVideoLedgerServiceServer) AddDailyBlock(ctx context.Context, req *DailyDataBlock) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDailyBlock not implemented")
}

func RegisterVideoLedgerServiceServer(s *grpc.Server, srv VideoLedgerServiceServer) {
	s.RegisterService(&_VideoLedgerService_serviceDesc, srv)
}

func _VideoLedgerService_AddGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddGenesisBlock(ctx, req.(*GenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddMinuteBlock(ctx, req.(*MinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddTenMinuteBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenMinuteDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddTenMinuteBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddTenMinuteBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddTenMinuteBlock(ctx, req.(*TenMinuteDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoLedgerService_AddDailyBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyDataBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoLedgerServiceServer).AddDailyBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.VideoLedgerService/AddDailyBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoLedgerServiceServer).AddDailyBlock(ctx, req.(*DailyDataBlock))
	}
	return interceptor(ctx, in, info, handler)
}

var _VideoLedgerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.VideoLedgerService",
	HandlerType: (*VideoLedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGenesisBlock",
			Handler:    _VideoLedgerService_AddGenesisBlock_Handler,
		},
		{
			MethodName: "AddMinuteBlock",
			Handler:    _VideoLedgerService_AddMinuteBlock_Handler,
		},
		{
			MethodName: "AddTenMinuteBlock",
			Handler:    _VideoLedgerService_AddTenMinuteBlock_Handler,
		},
		{
			MethodName: "AddDailyBlock",
			Handler:    _VideoLedgerService_AddDailyBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryBlockBatch(ctx context.Context, in *RequestDataBatch, opts ...grpc.CallOption) (*ResponseDataBatchBlock, error)
	QueryBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*ResponseBlock, error)
	QueryGenesisBlock(ctx context.Context, in *RequestGenesisBlock, opts ...grpc.CallOption) (*ResponseGenesisBlock, error)
	QueryTx(ctx context.Context, in *RequestTx, opts ...grpc.CallOption) (*ResponseTx, error)
	QueryDataReceipt(ctx context.Context, in *RequestDataReceipt, opts ...grpc.CallOption) (*ResponseDataReceipt, error)
}

type queryServiceClient struct {
	cc *grpc.ClientConn
}

func NewQueryServiceClient(cc *grpc.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryBlockBatch(ctx context.Context, in *RequestDataBatch, opts ...grpc.CallOption) (*ResponseDataBatchBlock, error) {
	out := new(ResponseDataBatchBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryBlockBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryBlock(ctx context.Context, in *RequestBlock, opts ...grpc.CallOption) (*ResponseBlock, error) {
	out := new(ResponseBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryGenesisBlock(ctx context.Context, in *RequestGenesisBlock, opts ...grpc.CallOption) (*ResponseGenesisBlock, error) {
	out := new(ResponseGenesisBlock)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryGenesisBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryTx(ctx context.Context, in *RequestTx, opts ...grpc.CallOption) (*ResponseTx, error) {
	out := new(ResponseTx)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryDataReceipt(ctx context.Context, in *RequestDataReceipt, opts ...grpc.CallOption) (*ResponseDataReceipt, error) {
	out := new(ResponseDataReceipt)
	err := c.cc.Invoke(ctx, "/rpc.QueryService/queryDataReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryBlockBatch(context.Context, *RequestDataBatch) (*ResponseDataBatchBlock, error)
	QueryBlock(context.Context, *RequestBlock) (*ResponseBlock, error)
	QueryGenesisBlock(context.Context, *RequestGenesisBlock) (*ResponseGenesisBlock, error)
	QueryTx(context.Context, *RequestTx) (*ResponseTx, error)
	QueryDataReceipt(context.Context, *RequestDataReceipt) (*ResponseDataReceipt, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryBlockBatch(ctx context.Context, req *RequestDataBatch) (*ResponseDataBatchBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlockBatch not implemented")
}
func (*UnimplementedQueryServiceServer) QueryBlock(ctx context.Context, req *RequestBlock) (*ResponseBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlock not implemented")
}
func (*UnimplementedQueryServiceServer) QueryGenesisBlock(ctx context.Context, req *RequestGenesisBlock) (*ResponseGenesisBlock, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryGenesisBlock not implemented")
}
func (*UnimplementedQueryServiceServer) QueryTx(ctx context.Context, req *RequestTx) (*ResponseTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (*UnimplementedQueryServiceServer) QueryDataReceipt(ctx context.Context, req *RequestDataReceipt) (*ResponseDataReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDataReceipt not implemented")
}

func RegisterQueryServiceServer(s *grpc.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryBlockBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryBlockBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryBlockBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryBlockBatch(ctx, req.(*RequestDataBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryBlock(ctx, req.(*RequestBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryGenesisBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGenesisBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryGenesisBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryGenesisBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryGenesisBlock(ctx, req.(*RequestGenesisBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryTx(ctx, req.(*RequestTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryDataReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDataReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryDataReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.QueryService/QueryDataReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryDataReceipt(ctx, req.(*RequestDataReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryBlockBatch",
			Handler:    _QueryService_QueryBlockBatch_Handler,
		},
		{
			MethodName: "queryBlock",
			Handler:    _QueryService_QueryBlock_Handler,
		},
		{
			MethodName: "queryGenesisBlock",
			Handler:    _QueryService_QueryGenesisBlock_Handler,
		},
		{
			MethodName: "queryTx",
			Handler:    _QueryService_QueryTx_Handler,
		},
		{
			MethodName: "queryDataReceipt",
			Handler:    _QueryService_QueryDataReceipt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}

// ToUpperClient is the client API for ToUpper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToUpperClient interface {
	Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperReply, error)
	NodeCredible(ctx context.Context, in *NodeCredibleData, opts ...grpc.CallOption) (*Response, error)
	Video(ctx context.Context, in *VideoData, opts ...grpc.CallOption) (*Response, error)
	Sensor(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Response, error)
	UserBehaviour(ctx context.Context, in *UserBehaviourData, opts ...grpc.CallOption) (*Response, error)
	ServiceAccess(ctx context.Context, in *ServiceAccessData, opts ...grpc.CallOption) (*Response, error)
}

type toUpperClient struct {
	cc *grpc.ClientConn
}

func NewToUpperClient(cc *grpc.ClientConn) ToUpperClient {
	return &toUpperClient{cc}
}

func (c *toUpperClient) Upper(ctx context.Context, in *UpperRequest, opts ...grpc.CallOption) (*UpperReply, error) {
	out := new(UpperReply)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Upper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) NodeCredible(ctx context.Context, in *NodeCredibleData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/NodeCredible", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) Video(ctx context.Context, in *VideoData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Video", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) Sensor(ctx context.Context, in *SensorData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/Sensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) UserBehaviour(ctx context.Context, in *UserBehaviourData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/UserBehaviour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *toUpperClient) ServiceAccess(ctx context.Context, in *ServiceAccessData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.ToUpper/ServiceAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToUpperServer is the server API for ToUpper service.
type ToUpperServer interface {
	Upper(context.Context, *UpperRequest) (*UpperReply, error)
	NodeCredible(context.Context, *NodeCredibleData) (*Response, error)
	Video(context.Context, *VideoData) (*Response, error)
	Sensor(context.Context, *SensorData) (*Response, error)
	UserBehaviour(context.Context, *UserBehaviourData) (*Response, error)
	ServiceAccess(context.Context, *ServiceAccessData) (*Response, error)
}

// UnimplementedToUpperServer can be embedded to have forward compatible implementations.
type UnimplementedToUpperServer struct {
}

func (*UnimplementedToUpperServer) Upper(ctx context.Context, req *UpperRequest) (*UpperReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upper not implemented")
}
func (*UnimplementedToUpperServer) NodeCredible(ctx context.Context, req *NodeCredibleData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeCredible not implemented")
}
func (*UnimplementedToUpperServer) Video(ctx context.Context, req *VideoData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Video not implemented")
}
func (*UnimplementedToUpperServer) Sensor(ctx context.Context, req *SensorData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sensor not implemented")
}
func (*UnimplementedToUpperServer) UserBehaviour(ctx context.Context, req *UserBehaviourData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBehaviour not implemented")
}
func (*UnimplementedToUpperServer) ServiceAccess(ctx context.Context, req *ServiceAccessData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceAccess not implemented")
}

func RegisterToUpperServer(s *grpc.Server, srv ToUpperServer) {
	s.RegisterService(&_ToUpper_serviceDesc, srv)
}

func _ToUpper_Upper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Upper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Upper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Upper(ctx, req.(*UpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_NodeCredible_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeCredibleData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).NodeCredible(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/NodeCredible",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).NodeCredible(ctx, req.(*NodeCredibleData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_Video_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Video(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Video",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Video(ctx, req.(*VideoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_Sensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).Sensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/Sensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).Sensor(ctx, req.(*SensorData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_UserBehaviour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBehaviourData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).UserBehaviour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/UserBehaviour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).UserBehaviour(ctx, req.(*UserBehaviourData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ToUpper_ServiceAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceAccessData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToUpperServer).ServiceAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.ToUpper/ServiceAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToUpperServer).ServiceAccess(ctx, req.(*ServiceAccessData))
	}
	return interceptor(ctx, in, info, handler)
}

var _ToUpper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.ToUpper",
	HandlerType: (*ToUpperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upper",
			Handler:    _ToUpper_Upper_Handler,
		},
		{
			MethodName: "NodeCredible",
			Handler:    _ToUpper_NodeCredible_Handler,
		},
		{
			MethodName: "Video",
			Handler:    _ToUpper_Video_Handler,
		},
		{
			MethodName: "Sensor",
			Handler:    _ToUpper_Sensor_Handler,
		},
		{
			MethodName: "UserBehaviour",
			Handler:    _ToUpper_UserBehaviour_Handler,
		},
		{
			MethodName: "ServiceAccess",
			Handler:    _ToUpper_ServiceAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend/rpc/proto/block.proto",
}
